apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ kind.Namespace.part }}
{%- if kind.Namespace.global_env == "production" %}
  namespace: {{ kind.Namespace.project_name }}
{%- else %}
  namespace: {{ kind.Namespace.project_name }}-{{ kind.Namespace.global_env }}
{%- endif %}
spec:
{%- if environment is defined %}
{%- if environment == 'Stage' %}
  replicas: 1
{%- else %}
  replicas: {{ kind.Deployment.replicas }}
{%- endif %}
{%- endif %}
  selector:
    matchLabels:
      run: {{ kind.Deployment.selector | default(kind.Namespace.part) }}
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
    type: RollingUpdate
  template:
    metadata:
      labels:
        run: {{ kind.Deployment.selector | default(kind.Namespace.part) }}
    spec:
{%- if kind.Deployment.nodeSelector is defined %}
      nodeSelector:
{%- for i in kind.Deployment.nodeSelector %}
{{ "        " + i + ": \"\""}}
{%- endfor %}
{%- endif %}
{%- if kind.Deployment.tolerations is defined %}
      tolerations:
{%- for i in kind.Deployment.tolerations %}
        - effect: {{ i.effect }}
          key: {{ i.key }}
{%- endfor %}
{%- endif %}
      containers:
{%- for a in kind.Deployment.containers %}
      - image: {{ a.docker_img }}:{{ a.build_tag }}
{%- if a.readiness is defined %}
        readinessProbe:
          failureThreshold: 3
          httpGet:
            path: {{ a.readiness.path }}
            port: {{ a.readiness.port |default("80") }}
{%- endif %}
{%- if a.lifecycle is defined %}
        lifecycle:
{%- if a.lifecycle.start is defined %}
          postStart:
            exec:
              command: {{ a.lifecycle.start }}
{%- endif %}
{%- if a.lifecycle.stop is defined %}
          preStop:
            exec:
              command: {{ a.lifecycle.stop }}
{%- endif %}
{%- endif %}

{%- if a.env is defined %}
        env:
{%- for item in a.env %}
          - name: {{ item.name }}
            value: "{{ item.value }}"
{%- endfor %}
{%- endif %}
        securityContext:
          allowPrivilegeEscalation: false
{%- if a.securityContext is defined %}
          capabilities:
            add:
{%- for i in a.securityContext.capabilities %}
              - {{ i }}
{%- endfor %}
{%- if a.securityContext.UID is defined %}
          procMount: {{ a.securityContext.procMount|default("Default") }}
          runAsGroup: {{ a.securityContext.GID }}
          runAsUser: {{ a.securityContext.UID }}
{%- endif %}
{%- endif %}
        imagePullPolicy: IfNotPresent
        name: {{ a.name }}
{%- if a.command is defined %}
        command: {{ a.command }}
{%- endif %}
{%- if a.args is defined %}
        args: {{ a.args }}
{%- endif %}
        ports:
{%- if a.container_ports is defined %}
{%- for i in a.container_ports %}
        - containerPort: {{ i.port }}
          name: {{ i.name|default("http")}}
          protocol: {{ i.protocol|default("TCP")}}
{%- endfor %}
{%- endif %}
{%- if a.resources is defined %}
        resources:
          limits:
            cpu: {{ a.resources.limits.cpu }}
            memory: {{ a.resources.limits.memory }}
          requests:
            cpu: {{ a.resources.requests.cpu }}
            memory: {{ a.resources.requests.memory }}
{%- else %}
        resources:
          limits:
            cpu: "1"
            memory: 2Gi
          requests:
            cpu: 100m
            memory: 256Mi
{%- endif %}
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
{%- if a.configmap is defined %}
        volumeMounts:
{%- for z in a.configmap %}
{%- for n in kind.ConfigMap %}
{%- if n.name == z %}
        - mountPath: {{ n.file_path }}
          name: {{ n.name }}
{%- endif %}
{%- endfor %}
{%- endfor %}
{%- endif %}
{%- if kind.Deployment.volumes is defined %}
        volumeMounts:
{%- for n in kind.Deployment.volumes %}
        - mountPath: {{ n.podPath }}
          name: {{ n.name }}
{%- endfor %}
{%- endif %}
{%- endfor %}
{%- if kind.ConfigMap is defined %}
      volumes:
{%- for n in kind.ConfigMap %}
      - configMap:
          defaultMode: 420
          name: {{ n.name }}
        name: {{ n.name }}
{%- endfor %}
{%- endif %}
{%- if kind.Deployment.volumes is defined %}
      volumes:
{%- for n in kind.Deployment.volumes %}
{%- if n.type is undefined %}
      - hostPath:
          path: {{ n.hostPath }}
          type: {{ n.type|default("\"\"") }}
        name: {{ n.name }}
{% endif %}
{%- if n.type is defined %}
{%- if n.type == 'Memory' %}
      - emptyDir:
          medium: {{ n.type }}
          sizeLimit: {{ n.sizeLimit}}
        name: {{ n.name }}
{%- endif %}
{%- endif %}
{%- endfor %}
{%- endif %}
      dnsPolicy: ClusterFirst
      imagePullSecrets:
      - name: dockerconfigjson
      restartPolicy: {{ kind.Deployment.restartPolicy |default("Always") }}
{%- if kind.Deployment.aliases is defined %}
      hostAliases:
{%- for i in kind.Deployment.aliases %}
        - ip: {{ i.ip }}
          hostnames:
{%- for n in i.hosts %}
            - {{ n }}
{%- endfor %}
{%- endfor %}
{%- endif %}
      schedulerName: default-scheduler
      securityContext: {}
      terminationGracePeriodSeconds: 30
